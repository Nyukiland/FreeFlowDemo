//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameInputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputManager"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""f77c912a-1ec8-451e-bc97-2a6f8e66631d"",
            ""actions"": [
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""b1897c1b-bbf4-438d-ba1c-6eae071ec90e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ForwardBack"",
                    ""type"": ""Value"",
                    ""id"": ""c3114de7-93e9-47d1-997b-5b2c9bd73a49"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""sprintInput"",
                    ""type"": ""Value"",
                    ""id"": ""372d9cd2-93ec-4930-abdd-a8ab0c0486ea"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""64f96085-cdf3-4803-bcb9-59ae714f70e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8570d5c2-c004-41ba-a739-b1485ad10564"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ea4c88a-203b-478e-ad7d-741cc9cfa8f3"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61571d4a-aa29-4b8e-ba42-ae01e4100ccf"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprintInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db222975-2664-454b-935b-aa89fc1206f1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""e30d18af-55e1-491c-81c6-5aa91b67e9c6"",
            ""actions"": [
                {
                    ""name"": ""Xmove"",
                    ""type"": ""Value"",
                    ""id"": ""8eac73bf-0fe1-4330-b275-4965a7fa437e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ymove"",
                    ""type"": ""Value"",
                    ""id"": ""f14cc737-ed19-4550-9368-f905b1a64e9f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c4689b9-cf57-445f-95fc-7826242c205a"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Xmove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c9ee679-1d66-4196-ac92-9bafe63d1a52"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ymove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fight"",
            ""id"": ""7f3fbdf8-f793-44be-90e7-f5605651f7f6"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""900493ca-7aa7-4c47-964f-6fac9ef40118"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""76aae71b-2967-4b5d-bf70-dd41bfc9f443"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Counter"",
                    ""type"": ""Button"",
                    ""id"": ""14de529e-94cb-47cf-ac34-c5134db3633c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DistAttack"",
                    ""type"": ""Button"",
                    ""id"": ""d1443b69-51ac-4436-be3b-ff79698ec652"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d998e2c8-34e8-4aae-b16d-529e703de005"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b593c0a0-c3fb-4c90-908d-0fb5a38cb01b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d21d523c-12d4-4d2e-ac89-cd0c75c3da20"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Counter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64043491-e2e7-4224-a1de-0d8f8de910e7"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DistAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Running"",
            ""id"": ""8364b869-2dbd-4d48-ac5a-511efab563aa"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""d3223917-b24d-465d-99b1-62c97c7fcfd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa74b3da-6996-4217-835e-e411c00a7a68"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BallInput"",
            ""id"": ""966c20a4-a51b-41f4-998d-603a3a0e6cff"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b2c59bbf-0703-41e8-b7a3-39b6ab631adf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeState"",
                    ""type"": ""Button"",
                    ""id"": ""28ebc255-9bf3-402e-b01d-a2253d9e14aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""4e87cd02-704c-44ae-bacf-13bb2b1e5c6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e90469ea-645e-4de6-af11-3d1762d737f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Value"",
                    ""id"": ""9e6ae07b-4760-48cd-b534-83b3e44b8eaf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c3563e8-38c6-4869-bd6f-f34ebf26e0c7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""595f91c6-e4d9-4959-80d5-e0e161ee6309"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""19300212-cb21-49d2-b010-fc68eccbd3c2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eeb552bd-27cc-4b8e-b457-8a505b6797dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""802bd30d-4f00-4d5c-8b47-e376dd963068"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb136e32-ce13-4f3d-b634-fb7fbfa620a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2e69dfe0-d1dc-45e2-afc1-8187be1f2f03"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a5e5382-d0e7-4b4c-827f-293e403383df"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f037b2f-0c5a-4724-88cb-07d01bc1e7a8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1066210-e8d1-4a8b-b8ee-218649d31bd3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5edeed5e-8c1d-4d19-9b76-813d2f12c6b0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a535f6e5-f22e-438f-aeea-59aa397d7a82"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""controller"",
                    ""id"": ""0ba3b1fe-5683-46b8-aff0-5fb1df05e5ee"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5bb9d994-ca82-41bc-bd72-2caedc64c1c2"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""923c84e2-88c1-4f14-926f-fa38bf7fe9e7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""keyboard"",
                    ""id"": ""6bec68db-9fa4-474b-b413-dc96d8175720"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""221e1125-163f-48d4-865b-49258b9c6713"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""217b96f4-ed0e-4ab3-8e79-6c8476325040"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_LeftRight = m_Movement.FindAction("LeftRight", throwIfNotFound: true);
        m_Movement_ForwardBack = m_Movement.FindAction("ForwardBack", throwIfNotFound: true);
        m_Movement_sprintInput = m_Movement.FindAction("sprintInput", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Xmove = m_Camera.FindAction("Xmove", throwIfNotFound: true);
        m_Camera_Ymove = m_Camera.FindAction("Ymove", throwIfNotFound: true);
        // Fight
        m_Fight = asset.FindActionMap("Fight", throwIfNotFound: true);
        m_Fight_Attack = m_Fight.FindAction("Attack", throwIfNotFound: true);
        m_Fight_Dash = m_Fight.FindAction("Dash", throwIfNotFound: true);
        m_Fight_Counter = m_Fight.FindAction("Counter", throwIfNotFound: true);
        m_Fight_DistAttack = m_Fight.FindAction("DistAttack", throwIfNotFound: true);
        // Running
        m_Running = asset.FindActionMap("Running", throwIfNotFound: true);
        m_Running_Newaction = m_Running.FindAction("New action", throwIfNotFound: true);
        // BallInput
        m_BallInput = asset.FindActionMap("BallInput", throwIfNotFound: true);
        m_BallInput_Move = m_BallInput.FindAction("Move", throwIfNotFound: true);
        m_BallInput_ChangeState = m_BallInput.FindAction("ChangeState", throwIfNotFound: true);
        m_BallInput_Grapple = m_BallInput.FindAction("Grapple", throwIfNotFound: true);
        m_BallInput_Jump = m_BallInput.FindAction("Jump", throwIfNotFound: true);
        m_BallInput_UpDown = m_BallInput.FindAction("UpDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_LeftRight;
    private readonly InputAction m_Movement_ForwardBack;
    private readonly InputAction m_Movement_sprintInput;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @GameInputManager m_Wrapper;
        public MovementActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRight => m_Wrapper.m_Movement_LeftRight;
        public InputAction @ForwardBack => m_Wrapper.m_Movement_ForwardBack;
        public InputAction @sprintInput => m_Wrapper.m_Movement_sprintInput;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @ForwardBack.started += instance.OnForwardBack;
            @ForwardBack.performed += instance.OnForwardBack;
            @ForwardBack.canceled += instance.OnForwardBack;
            @sprintInput.started += instance.OnSprintInput;
            @sprintInput.performed += instance.OnSprintInput;
            @sprintInput.canceled += instance.OnSprintInput;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @ForwardBack.started -= instance.OnForwardBack;
            @ForwardBack.performed -= instance.OnForwardBack;
            @ForwardBack.canceled -= instance.OnForwardBack;
            @sprintInput.started -= instance.OnSprintInput;
            @sprintInput.performed -= instance.OnSprintInput;
            @sprintInput.canceled -= instance.OnSprintInput;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Xmove;
    private readonly InputAction m_Camera_Ymove;
    public struct CameraActions
    {
        private @GameInputManager m_Wrapper;
        public CameraActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Xmove => m_Wrapper.m_Camera_Xmove;
        public InputAction @Ymove => m_Wrapper.m_Camera_Ymove;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Xmove.started += instance.OnXmove;
            @Xmove.performed += instance.OnXmove;
            @Xmove.canceled += instance.OnXmove;
            @Ymove.started += instance.OnYmove;
            @Ymove.performed += instance.OnYmove;
            @Ymove.canceled += instance.OnYmove;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Xmove.started -= instance.OnXmove;
            @Xmove.performed -= instance.OnXmove;
            @Xmove.canceled -= instance.OnXmove;
            @Ymove.started -= instance.OnYmove;
            @Ymove.performed -= instance.OnYmove;
            @Ymove.canceled -= instance.OnYmove;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Fight
    private readonly InputActionMap m_Fight;
    private List<IFightActions> m_FightActionsCallbackInterfaces = new List<IFightActions>();
    private readonly InputAction m_Fight_Attack;
    private readonly InputAction m_Fight_Dash;
    private readonly InputAction m_Fight_Counter;
    private readonly InputAction m_Fight_DistAttack;
    public struct FightActions
    {
        private @GameInputManager m_Wrapper;
        public FightActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Fight_Attack;
        public InputAction @Dash => m_Wrapper.m_Fight_Dash;
        public InputAction @Counter => m_Wrapper.m_Fight_Counter;
        public InputAction @DistAttack => m_Wrapper.m_Fight_DistAttack;
        public InputActionMap Get() { return m_Wrapper.m_Fight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightActions set) { return set.Get(); }
        public void AddCallbacks(IFightActions instance)
        {
            if (instance == null || m_Wrapper.m_FightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FightActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Counter.started += instance.OnCounter;
            @Counter.performed += instance.OnCounter;
            @Counter.canceled += instance.OnCounter;
            @DistAttack.started += instance.OnDistAttack;
            @DistAttack.performed += instance.OnDistAttack;
            @DistAttack.canceled += instance.OnDistAttack;
        }

        private void UnregisterCallbacks(IFightActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Counter.started -= instance.OnCounter;
            @Counter.performed -= instance.OnCounter;
            @Counter.canceled -= instance.OnCounter;
            @DistAttack.started -= instance.OnDistAttack;
            @DistAttack.performed -= instance.OnDistAttack;
            @DistAttack.canceled -= instance.OnDistAttack;
        }

        public void RemoveCallbacks(IFightActions instance)
        {
            if (m_Wrapper.m_FightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFightActions instance)
        {
            foreach (var item in m_Wrapper.m_FightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FightActions @Fight => new FightActions(this);

    // Running
    private readonly InputActionMap m_Running;
    private List<IRunningActions> m_RunningActionsCallbackInterfaces = new List<IRunningActions>();
    private readonly InputAction m_Running_Newaction;
    public struct RunningActions
    {
        private @GameInputManager m_Wrapper;
        public RunningActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Running_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Running; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunningActions set) { return set.Get(); }
        public void AddCallbacks(IRunningActions instance)
        {
            if (instance == null || m_Wrapper.m_RunningActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunningActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IRunningActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IRunningActions instance)
        {
            if (m_Wrapper.m_RunningActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunningActions instance)
        {
            foreach (var item in m_Wrapper.m_RunningActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunningActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunningActions @Running => new RunningActions(this);

    // BallInput
    private readonly InputActionMap m_BallInput;
    private List<IBallInputActions> m_BallInputActionsCallbackInterfaces = new List<IBallInputActions>();
    private readonly InputAction m_BallInput_Move;
    private readonly InputAction m_BallInput_ChangeState;
    private readonly InputAction m_BallInput_Grapple;
    private readonly InputAction m_BallInput_Jump;
    private readonly InputAction m_BallInput_UpDown;
    public struct BallInputActions
    {
        private @GameInputManager m_Wrapper;
        public BallInputActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BallInput_Move;
        public InputAction @ChangeState => m_Wrapper.m_BallInput_ChangeState;
        public InputAction @Grapple => m_Wrapper.m_BallInput_Grapple;
        public InputAction @Jump => m_Wrapper.m_BallInput_Jump;
        public InputAction @UpDown => m_Wrapper.m_BallInput_UpDown;
        public InputActionMap Get() { return m_Wrapper.m_BallInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallInputActions set) { return set.Get(); }
        public void AddCallbacks(IBallInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BallInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ChangeState.started += instance.OnChangeState;
            @ChangeState.performed += instance.OnChangeState;
            @ChangeState.canceled += instance.OnChangeState;
            @Grapple.started += instance.OnGrapple;
            @Grapple.performed += instance.OnGrapple;
            @Grapple.canceled += instance.OnGrapple;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UpDown.started += instance.OnUpDown;
            @UpDown.performed += instance.OnUpDown;
            @UpDown.canceled += instance.OnUpDown;
        }

        private void UnregisterCallbacks(IBallInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ChangeState.started -= instance.OnChangeState;
            @ChangeState.performed -= instance.OnChangeState;
            @ChangeState.canceled -= instance.OnChangeState;
            @Grapple.started -= instance.OnGrapple;
            @Grapple.performed -= instance.OnGrapple;
            @Grapple.canceled -= instance.OnGrapple;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UpDown.started -= instance.OnUpDown;
            @UpDown.performed -= instance.OnUpDown;
            @UpDown.canceled -= instance.OnUpDown;
        }

        public void RemoveCallbacks(IBallInputActions instance)
        {
            if (m_Wrapper.m_BallInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BallInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallInputActions @BallInput => new BallInputActions(this);
    public interface IMovementActions
    {
        void OnLeftRight(InputAction.CallbackContext context);
        void OnForwardBack(InputAction.CallbackContext context);
        void OnSprintInput(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnXmove(InputAction.CallbackContext context);
        void OnYmove(InputAction.CallbackContext context);
    }
    public interface IFightActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnCounter(InputAction.CallbackContext context);
        void OnDistAttack(InputAction.CallbackContext context);
    }
    public interface IRunningActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBallInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnChangeState(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
    }
}
